name: Build

on:
  push:
    tags: "*"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            archive-name: airdo-${{ github.ref_name }}-linux-amd64.tar.gz
            archive-dir: airdo-${{ github.ref_name }}-linux-amd64
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            archive-name: airdo-${{ github.ref_name }}-macos-amd64.tar.gz
            archive-dir: airdo-${{ github.ref_name }}-macos-amd64
          - build: windows
            os: windows-latest
            rust: stable-x86_64-msvc
            target: x86_64-pc-windows-msvc
            archive-name: airdo-${{ github.ref_name }}-windows-amd64.zip
            archive-dir: airdo-${{ github.ref_name }}-windows-amd64
    steps:
    - uses: actions/checkout@v4
    - name: Install Nodejs
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: npm
    - name: Build web
      shell: bash
      run: npm install && npm run build && mv dist ui
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        cache-workspaces: "src-api"
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
    - name: Build
      run: cd src-api && cargo build --verbose --release --target ${{ matrix.target }}
      env:
        RUST_BACKTRACE: 1
    - name: Strip binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "src-api/target/${{ matrix.target }}/release/airdo"
    - name: Build archive
      shell: bash
      run: |
        mkdir ${{ matrix.archive-dir }}
        mv src-api/config/config-example.yml src-api/config/config.yml
        cp -r LICENSE README.md ui src-api/target/${{ matrix.target }}/release/airdo* src-api/config ${{ matrix.archive-dir }}/
        SING_BOX_TAG_NAME=$(curl -s "https://api.github.com/repos/SagerNet/sing-box/releases/latest" | jq -r '.tag_name')
        SING_BOX_VERSION=${SING_BOX_TAG_NAME#?}
        MIHOMO_TAG_NAME=$(curl -s "https://api.github.com/repos/MetaCubeX/mihomo/releases/latest" | jq -r '.tag_name')
        if [ "${{ matrix.build }}" = "windows" ]; then
          curl -O -L https://github.com/SagerNet/sing-box/releases/download/${SING_BOX_TAG_NAME}/sing-box-${SING_BOX_VERSION}-windows-amd64.zip
          7z x sing-box-${SING_BOX_VERSION}-windows-amd64.zip
          mv sing-box-${SING_BOX_VERSION}-windows-amd64 sing-box
          cp -r sing-box ${{ matrix.archive-dir }}/
          curl -O -L https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_TAG_NAME}/mihomo-windows-amd64-${MIHOMO_TAG_NAME}.zip
          7z x mihomo-windows-amd64-${MIHOMO_TAG_NAME}.zip
          mkdir mihomo
          mv mihomo-windows-amd64 mihomo/mihomo
          cp -r mihomo ${{ matrix.archive-dir }}/
          7z a "${{ matrix.archive-name }}" ${{ matrix.archive-dir }}
        elif [ "${{ matrix.build }}" = "linux" ]; then
          wget https://github.com/SagerNet/sing-box/releases/download/${SING_BOX_TAG_NAME}/sing-box-${SING_BOX_VERSION}-linux-amd64.tar.gz
          tar -zxvf sing-box-${SING_BOX_VERSION}-linux-amd64.tar.gz
          mv sing-box-${SING_BOX_VERSION}-linux-amd64 sing-box
          cp -r sing-box ${{ matrix.archive-dir }}/
          wget https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_TAG_NAME}/mihomo-linux-amd64-${MIHOMO_TAG_NAME}.gz
          mkdir mihomo
          gzip -dN mihomo-linux-amd64-${MIHOMO_TAG_NAME}.gz
          mv mihomo-linux-amd64 mihomo/mihomo
          cp -r mihomo ${{ matrix.archive-dir }}/
          tar -czf "${{ matrix.archive-name }}" ${{ matrix.archive-dir }}
        else
          wget https://github.com/SagerNet/sing-box/releases/download/${SING_BOX_TAG_NAME}/sing-box-${SING_BOX_VERSION}-darwin-amd64.tar.gz
          tar -zxvf sing-box-${SING_BOX_VERSION}-darwin-amd64.tar.gz
          mv sing-box-${SING_BOX_VERSION}-darwin-amd64 sing-box
          cp -r sing-box ${{ matrix.archive-dir }}/
          wget https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_TAG_NAME}/mihomo-darwin-amd64-${MIHOMO_TAG_NAME}.gz
          mkdir mihomo
          gzip -dN mihomo-darwin-amd64-${MIHOMO_TAG_NAME}.gz
          mv mihomo-darwin-amd64 mihomo/mihomo
          cp -r mihomo ${{ matrix.archive-dir }}/
          tar -czf "${{ matrix.archive-name }}" ${{ matrix.archive-dir }}
        fi
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ matrix.archive-name }}

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            entitle40/airdo:${{ github.ref_name }}
            entitle40/airdo:latest
          cache-from: type=gha
